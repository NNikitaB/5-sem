class Database():
    # replace the user, password, hostname and database according to your configuration according to your information
    #engine = db.create_engine('sqlite:///:memory:', echo=True)
    engine = db.create_engine('postgresql://postgres:1999@localhost/alhimic',echo=True)
    def __init__(self):
        self.connection = self.engine.connect()
        self.metadata =metadata= MetaData(self.engine)
        self.airpost = Table('airpost', metadata,
        Column('id', Integer, primary_key=True),
        Column('owner', String,nullable=False),
        Column('country', String,nullable=False),
        Column('city', String,nullable=False),
        Column('name', String,nullable=False)
        )
        self.airplane = Table('airplane', metadata,
        Column('id', Integer, primary_key=True),
        Column('countplases    ', Integer,nullable=False),
        Column('class', Integer,nullable=False),
        Column('firm', String,nullable=False),
        Column('yearreliase', Integer,nullable=False),
        Column('airpostid', Integer,ForeignKey('airpost.id',ondelete="CASCADE"),nullable=False)
        )
        self.personal= Table('personal', metadata,
        Column('id', Integer, primary_key=True),
        Column('calary', Integer,nullable=False),
        Column('name', String,nullable=False),
        Column('airpost_id', Integer,ForeignKey('airpost.id',ondelete="CASCADE"),nullable=False)
        )
        self.position= Table('position', metadata,
        Column('id', Integer, primary_key=True),
        Column('name', String,nullable=False),
        Column('personal_id', Integer,ForeignKey('personal.id',ondelete="CASCADE"),nullable=False)
        )
        self.airplanepersonal= Table('airplanepersonal', metadata,
        Column('airplane_id', Integer,ForeignKey('airplane.id',ondelete="CASCADE"),nullable=False),
        Column('personal_id', Integer,ForeignKey('personal.id',ondelete="CASCADE"),nullable=False)
        )
        self.flight= Table('flight', metadata,
        Column('id', Integer, primary_key=True),
        Column('whereto', String,nullable=False),
        Column('wherefrom', String,nullable=False),
        Column('time', Date,nullable=False),
        Column('airplane_id', Integer,ForeignKey('airplane.id',ondelete="CASCADE"),nullable=False),
        )
        self.flightpersonal= Table('flightpersonal', metadata,
        Column('flight_id', Integer,ForeignKey('flight.id',ondelete="CASCADE"),nullable=False),
        Column('personal_id', Integer,ForeignKey('personal.id',ondelete="CASCADE"),nullable=False)
        )
        self.stocks= Table('stocks', metadata,
        Column('id', Integer, primary_key=True),
        Column('date', Date,nullable=False),
        Column('dataaction', Date,nullable=False),
        )
        self.client= Table('client', metadata,
        Column('id', Integer, primary_key=True),
        Column('date', Date,nullable=False),
        Column('fillname', String,nullable=False),
        Column('pasport', Integer,nullable=False),
        Column('happyb', Date,nullable=False),
        Column('exps',Integer),
        )
        self.phone= Table('phone', metadata,
        Column('client_id', Integer,ForeignKey('client.id',ondelete="CASCADE"),nullable=False),
        Column('data', String,nullable=False),
        Column('number', Integer,nullable=False),
        )
        self.ticket= Table('ticket', metadata,
        Column('id', Integer,primary_key=True),
        Column('cost', Integer,nullable=False),
        Column('dataaction', Integer,nullable=False),
        Column('datastatement', Date,nullable=False),
        Column('client_id', Integer,ForeignKey('client.id',ondelete="CASCADE"),nullable=False),
        Column('flight_id', Integer,ForeignKey('flight.id',ondelete="CASCADE"),nullable=False),
        Column('stocks_id', Integer,ForeignKey('stocks.id',ondelete="CASCADE"),nullable=False),
        )
        self.cargo= Table('cargo', metadata,
        Column('ticket_id', Integer,ForeignKey('ticket.id',ondelete="CASCADE"),nullable=False),
        Column('cost', Integer,nullable=False),
        Column('weight', Integer,nullable=False),
        Column('class', Integer,nullable=False),
        )
        #cargo.CheckConstraint('weight > 0')
        #cargo.CheckConstraint('cost > 0')
        metadata.create_all(self.engine)
        print("DB Instance created")
        for _t in metadata.tables:
            print("Table: ", _t)

al=Database()


































from sqlalchemy import Column, Integer, String, create_engine,Date
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey,Date,CheckConstraint
import sqlalchemy as db

#engine = create_engine('sqlite:///:memory:', echo=True)
engine = create_engine('postgresql://postgres:1999@localhost/alhimic',echo=True)
Base = declarative_base()
Session = sessionmaker(bind=engine)

class Airpost(Base):
    __tablename__ = 'airpost'
    id = Column(Integer, primary_key=True)
    owner = Column(String,nullable=False)
    country = Column(String,nullable=False)
    city = Column(String,nullable=False)
    name=Column( String,nullable=False)

    def __init__(self, owner, country, city,name):
        self.owner = owner
        self.country = country
        self.city = city
        self.name = name
    def __repr__(self):
        return "<airpost('%s','%s', '%s', '%s')>" % (self.owner, self.country, self.city, self.name)

class Airplane(Base):
    __tablename__ = 'airplane'
    id = Column(Integer, primary_key=True)
    countplases = Column(Integer,nullable=False)
    Class = Column(Integer,nullable=False)
    firm = Column(String,nullable=False)
    yearreliase=Column( Integer,nullable=False)
    airpost_id=Column( Integer,ForeignKey('airpost.id'))

    def __init__(self, countplases, Class, firm,yearreliase):
        self.countplases = countplases
        self.Class = Class
        self.firm = firm
        self.yearreliase = yearreliase
    def __repr__(self):
        return "<airplane('%i','%i', '%s', '%i')>" % (self.countplases, self.Class, self.firm, self.yearreliase)

class Personal(Base):
    __tablename__ = 'personal'
    id = Column(Integer, primary_key=True)
    calary = Column(Integer,nullable=False)
    name = Column(String,nullable=False)
    airpost_id=Column( Integer,ForeignKey('airpost.id',ondelete="CASCADE"),nullable=False)

    def __init__(self, calary, name):
        self.calary = calary
        self.name = name

class Position(Base):
    __tablename__ = 'position'
    id = Column(Integer, primary_key=True)
    name = Column(String,nullable=False)
    personal_id=Column( Integer,ForeignKey('personal.id',ondelete="CASCADE"),nullable=False)

    def __init__(self, name):
        self.name = name

class Flight(Base):
    __tablename__ = 'flight'
    id = Column(Integer, primary_key=True)
    whereto = Column(String,nullable=False)
    wherefrom = Column(String,nullable=False)
    time = Column(Date,nullable=False)
    airplane_id=Column(Integer,ForeignKey('airplane.id',ondelete="CASCADE"),nullable=False)


    def __init__(self, whereto,wherefrom,time ):
        self.whereto = whereto
        self.wherefrom = wherefrom
        self.time = time


class Stocks(Base):
    __tablename__ = 'stocks'
    id = Column(Integer, primary_key=True)
    date = Column(Date,nullable=False)
    dataaction = Column(Date,nullable=False)

    def __init__(self, date,dataaction,time ):
        self.date = date
        self.dataaction = dataaction

class Client(Base):
    __tablename__ = 'client'
    id = Column(Integer, primary_key=True)
    date = Column(Date,nullable=False)
    fillname = Column(String,nullable=False)
    pasport = Column(Integer,nullable=False)
    happyb = Column(Date,nullable=False)
    exps = Column(Integer,nullable=False)

    def __init__(self, date,fillname,pasport,happyb,exps ):
        self.date = date
        self.fillname = fillname
        self.pasport = pasport
        self.happyb = happyb
        self.exps = exps


class Phone(Base):
    __tablename__ = 'phone'
    id = Column(Integer, primary_key=True)
    client_id =  Column(Integer,ForeignKey('client.id',ondelete="CASCADE"),nullable=False)
    date = Column(Date,nullable=False)
    number = Column(Integer,nullable=False)

    def __init__(self, date,number ):
        self.date = date
        self.number = number


class Ticket(Base):
    __tablename__ = 'ticket'
    id = Column(Integer, primary_key=True)
    cost = Column(Integer,nullable=False)
    dataaction = Column(Integer,nullable=False)
    datastatement = Column(Date,nullable=False)
    client_id =  Column( Integer,ForeignKey('client.id',ondelete="CASCADE"),nullable=False)
    flight_id =  Column( Integer,ForeignKey('flight.id',ondelete="CASCADE"),nullable=False)
    stocks_id =  Column( Integer,ForeignKey('stocks.id',ondelete="CASCADE"),nullable=False)

    def __init__(self, cost,dataaction,datastatement,happyb,exps ):
        self.cost = cost
        self.dataaction = dataaction
        self.datastatement = datastatement

        

class Cargo(Base):
    __tablename__ = 'cargo'
    id = Column(Integer, primary_key=True)
    cost = Column(Integer,nullable=False)
    weight = Column(Integer,nullable=False)
    Class = Column(Integer,nullable=False)
    ticket_id =  Column( Integer,ForeignKey('ticket.id',ondelete="CASCADE"),nullable=False)

    def __init__(self, cost,dataaction,datastatement,happyb,exps ):
        self.cost = cost
        self.dataaction = dataaction
        self.datastatement = datastatement

class AirplaneAersonal(Base):
    __tablename__ = 'airplanepersonal'
    id = Column(Integer, primary_key=True)
    airplane_id = Column(Integer,ForeignKey('airplane.id',ondelete="CASCADE"),nullable=False)
    personal_id = Column(Integer,ForeignKey('personal.id',ondelete="CASCADE"),nullable=False)

class FlightPersonal(Base):
    __tablename__ = 'flightpersonal'
    id = Column(Integer, primary_key=True)
    flight_id = Column(Integer,ForeignKey('flight.id',ondelete="CASCADE"),nullable=False)
    personal_id = Column(Integer,ForeignKey('personal.id',ondelete="CASCADE"),nullable=False)

#Base.metadata.create_all(engine)













import sqlite3
import sqlalchemy as db
import prettytable
import tornado
import socket
from class1 import Phone,Airpost,Airplane,Personal,Position,Flight,Stocks,Client,Ticket,Cargo,AirplaneAersonal,FlightPersonal
from class1 import Base,engine

from sqlalchemy import Column, Integer, String, create_engine,Date
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker,Session
from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey,Date,CheckConstraint
import sqlalchemy as db


Base.metadata.create_all(engine)
session = Session(bind=engine)
#aist=Airpost("YOU","HE","SHE","I")
#session.add(aist)
for instance in session.query(Airpost).order_by(Airpost.id): 
    print(instance.owner, instance.country,instance.city,instance.name,instance.id)
session.commit()
session.close()


